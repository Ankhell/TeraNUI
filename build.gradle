/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

// gradle wrapper version
wrapper {
    gradleVersion '2.11'
}

// Declare remote repositories we're interested in - library files will be fetched from here
repositories {
    // Main Maven repo
    mavenCentral()

    // MovingBlocks Artifactory instance for libs not readily available elsewhere plus our own libs
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
}

// Primary dependencies definition
dependencies {
    compile group: 'org.terasology', name: 'gestalt-asset-core', version: '5.0.1'
}

checkstyle {
    ignoreFailures = true
    configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
    configProperties.samedir = checkstyle.configFile.parentFile
}

pmd {
    ignoreFailures = true
    ruleSetFiles = files("$rootDir/config/pmd/pmd.xml")
}

// Setup IntelliJ-IDEA
idea {
    project {
        jdkName = '1.8'
        languageLevel = 'JDK_1_8'

        ipr {
            withXml { xmlProvider ->
                def iprNode = xmlProvider.asNode()

                ideaActivateGit(iprNode)
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
            }
        }
    }

    module {
        // Exclude Gradle dir
        excludeDirs += file('gradle')

        // Exclude Eclipse dirs
        excludeDirs += file('bin')
        excludeDirs += file('.settings')
    }

    workspace {
        iws {
            withXml { xmlProvider ->
                def iwsNode = xmlProvider.asNode()

                ideaMakeAutomatically(iwsNode)
            }
        }
    }
}

ext {
    // Activate 'git' as VCS
    ideaActivateGit = { Node iprNode ->
        def vcsMappings = iprNode.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsMappings.mapping.@vcs = 'Git'
    }

    // Activate and config 'Checkstyle' plugin
    ideaActivateCheckstyle = { Node iprNode ->
        def checkstyle = iprNode.component.find { it.'@name' == 'CheckStyle-IDEA' }
        if (checkstyle == null) {
            // Create new CheckStyle component
            checkstyle = iprNode.appendNode('component', [name: 'CheckStyle-IDEA'])
            // use NodeBuilder to create the config block in the xml structure
            def builder = new NodeBuilder()
            def option = builder.option(name: 'configuration') {
                map {
                    entry(key: 'active-configuration',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:TeraNUI CheckStyle')
                    entry(key: 'check-nonjava-files', value: false)
                    entry(key: 'check-test-classes', value: true)
                    entry(key: 'location-0',
                            value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules')
                    entry(key: 'location-1',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:TeraNUI CheckStyle')
                    entry(key: 'property-1.samedir', value: 'config/checkstyle')
                    entry(key: 'suppress-errors', value: false)
                    entry(key: 'thirdparty-classpath', value: '')
                }
            }
            // Add result from NodeBuilder
            checkstyle.append option
        }
    }

    // Activate copyright conventions
    ideaActivateCopyright = { Node iprNode ->
        def copyrightManager = iprNode.component.find { it.'@name' == 'CopyrightManager' }
        copyrightManager.'@default' = "nui-core"
        def copyright = copyrightManager.copyright.find {
            it.option.find { it.'@name' == "myName" }?.'@value' == "TeraNUI"
        }
        if (copyright == null) {
            copyrightManager.append(new XmlParser().parseText('''
                <copyright>
                    <option name="notice" value="Copyright 2016 MovingBlocks&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;     http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
                    <option name="keyword" value="Copyright" />
                    <option name="allowReplaceKeyword" value="" />
                    <option name="myName" value="TeraNUI" />
                    <option name="myLocal" value="true" />
                </copyright>
            '''))
        }
    }

    // Enable "make project automatically"
    ideaMakeAutomatically = { Node iwsNode ->
        def compilerWsConf = iwsNode.find { it.'@name' == 'CompilerWorkspaceConfiguration' }
        if (compilerWsConf == null) {
            compilerWsConf = iwsNode.appendNode('component', [name: 'CompilerWorkspaceConfiguration'])
            compilerWsConf.appendNode("option", [name: "MAKE_PROJECT_ON_SAVE", value: "true"])
        }
    }
}